package internal

import (
	"fmt"

	"github.com/dave/jennifer/jen"
	"google.golang.org/protobuf/compiler/protogen"
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".pb.mongo.go"
	genFile := jen.NewFile(string(file.GoPackageName))
	genFile.HeaderComment("Code generated by protoc-gen-go-mongo. DO NOT EDIT.")
	genFile.HeaderComment("versions:")
	genFile.HeaderComment(fmt.Sprintf("- protoc-gen-go-mongo %s", version))
	genFile.HeaderComment(fmt.Sprintf("- protoc                 %s", protocVersion(gen)))
	if file.Proto.GetOptions().GetDeprecated() {
		genFile.HeaderComment(fmt.Sprintf("%s is a deprecated file.", file.Desc.Path()))
	} else {
		genFile.HeaderComment(fmt.Sprintf("source: %s", file.Desc.Path()))
	}

	genFile.Comment("This is a compile-time assertion to ensure that this generated file")
	genFile.Comment("is compatible with the grpc package it is being compiled against.")
	genFile.Comment("Requires gRPC-Go v1.32.0 or later.")
	genFile.Id("const _ =").Qual("google.golang.org/grpc", "SupportPackageIsVersion7")

	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.Skip()

	genEnum := func(enum *protogen.Enum) {
		genFile.
			Func().Id(enum.GoIdent.GoName + "Values").
			Params().
			Index().String().
			BlockFunc(func(group *jen.Group) {
				var codes []jen.Code
				for _, v := range enum.Values {
					codes = append(codes, jen.Lit(string(v.Desc.Name())))
				}
				group.Return(jen.Index().String().Values(codes...))
			})
		genFile.Line()

		genFile.
			Func().
			Id(enum.GoIdent.GoName + "Decode").
			Params(jen.Id("name").String()).
			Id(enum.GoIdent.GoName).
			BlockFunc(func(group *jen.Group) {
				var codes []jen.Code
				for _, v := range enum.Values {
					codes = append(codes, jen.Lit(string(v.Desc.Name())))
				}
				group.Return(jen.Id(enum.GoIdent.GoName).Call(
					jen.Id(enum.GoIdent.GoName + "_value").Index(jen.Id("name"))))
			})
		genFile.Line()
	}

	var getEnums func(msg *protogen.Message) []*protogen.Enum
	getEnums = func(msg *protogen.Message) []*protogen.Enum {
		var nn []*protogen.Enum
		for _, enum := range msg.Enums {
			nn = append(nn, enum)
		}

		for _, msg := range msg.Messages {
			nn = append(nn, getEnums(msg)...)
		}
		return nn
	}

	for _, enum := range file.Enums {
		g.Unskip()
		genEnum(enum)
	}

	for _, msg := range file.Messages {
		for _, enum := range getEnums(msg) {
			g.Unskip()
			genEnum(enum)
		}
	}

	g.P(genFile.GoString())
	return g
}
